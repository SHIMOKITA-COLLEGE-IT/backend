# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type SocialLink {
  id: ID!
  profile: Profile!
  profileId: Int!
  name: String!
  socialLinkType: SocialLinkType!
  url: String!
}

enum SocialLinkType {
  WEBSITE
  INSTAGRAM
  TWITTER
  FACEBOOK
  LINE
  SNAPCHAT
  TIKTOK
  YOUTUBE
  GITHUB
  BEREAL
  LINKTREE
  OTHER
}

type ProgramCount {
  shimokitaCollegeProfiles: Int!
}

type Program {
  id: ID!
  name: String!
  from: DateTime
  to: DateTime
  shimokitaCollegeProfiles: [ShimokitaCollegeProfile!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: ProgramCount!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type HomeCount {
  photos: Int!
  shimokitaCollegeProfiles: Int!
}

type Home {
  id: ID!
  name: String!
  from: DateTime
  to: DateTime
  photos: [Photo!]
  shimokitaCollegeProfiles: [ShimokitaCollegeProfile!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: HomeCount!
}

type CoCoCount {
  photos: Int!
  shimokitaCollegeProfiles: Int!
}

type CoCo {
  id: ID!
  name: String!
  imageUrl: String
  slackChannel: String
  description: String
  photos: [Photo!]
  shimokitaCollegeProfiles: [ShimokitaCollegeProfile!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: CoCoCount!
}

type ClubCount {
  photos: Int!
  shimokitaCollegeProfiles: Int!
}

type Club {
  id: ID!
  name: String!
  imageUrl: String
  slackChannel: String
  description: String
  photos: [Photo!]
  shimokitaCollegeProfiles: [ShimokitaCollegeProfile!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: ClubCount!
}

type PhotoCount {
  profiles: Int!
  houses: Int!
  homes: Int!
  coCos: Int!
  clubs: Int!
}

type Photo {
  id: ID!
  imageUrl: String!
  alt: String!
  profiles: [Profile!]
  houses: [House!]
  homes: [Home!]
  coCos: [CoCo!]
  clubs: [Club!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: PhotoCount!
}

type HouseCount {
  photos: Int!
  shimokitaCollegeProfiles: Int!
}

type House {
  id: ID!
  name: String!
  from: DateTime
  to: DateTime
  photos: [Photo!]
  shimokitaCollegeProfiles: [ShimokitaCollegeProfile!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: HouseCount!
}

type ShimokitaCollegeProfileCount {
  programs: Int!
  houses: Int!
  homes: Int!
  coCos: Int!
  clubs: Int!
}

type ShimokitaCollegeProfile {
  id: ID!
  profile: Profile!
  profileId: Int!
  slackEmail: String!
  roomNumber: Int!
  postNumber: Int!
  programs: [Program!]
  houses: [House!]
  homes: [Home!]
  coCos: [CoCo!]
  clubs: [Club!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: ShimokitaCollegeProfileCount!
}

type RootsCount {
  myRoots: Int!
}

type Roots {
  id: ID!
  name: String!
  RootsType: RootsType!
  googleMapUrl: String
  introductionUrl: String
  myRoots: [MyRoots!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: RootsCount!
}

enum RootsType {
  COUNTRY
  HOMETOWN
  EDUCATION
  WORK
  GROUP
}

type SkillCount {
  children: Int!
  profiles: Int!
}

type Skill {
  id: ID!
  name: String!
  parentId: Int
  parent: Skill
  children: [Skill!]
  profiles: [MySkills!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: SkillCount!
}

type MySkills {
  profile: Profile!
  profileId: Int!
  skill: Skill!
  skillId: Int!
  myRoots: MyRoots
  myRootsId: Int
}

type MyRootsCount {
  profilesOnSkills: Int!
}

type MyRoots {
  id: ID!
  profile: Profile!
  profileId: Int!
  roots: Roots!
  rootsId: Int!
  from: DateTime
  to: DateTime
  profilesOnSkills: [MySkills!]
  _count: MyRootsCount!
}

type TagCount {
  profiles: Int!
}

type Tag {
  id: ID!
  name: String!
  iconUrl: String
  profiles: [Profile!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: TagCount!
}

type ProfileCount {
  socialLinks: Int!
  myRoots: Int!
  mySkills: Int!
  tags: Int!
  photos: Int!
}

type Profile {
  id: ID!
  user: User!
  userId: String!
  username: String!
  firstName: String!
  lastName: String!
  nickName: String
  showOnlyNickname: Boolean!
  birthday: DateTime!
  showAge: Boolean!
  position: String!
  socialLinks: [SocialLink!]
  shimokitaCollegeProfile: ShimokitaCollegeProfile
  myRoots: [MyRoots!]
  mySkills: [MySkills!]
  bio: String!
  tags: [Tag!]
  photos: [Photo!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: ProfileCount!
}

type User {
  id: ID!
  firebaseAuthUid: String!
  email: String
  imageUrl: String
  disabled: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  profile: Profile
}

type UserCountAggregate {
  id: Int!
  firebaseAuthUid: Int!
  email: Int!
  imageUrl: Int!
  disabled: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type UserMinAggregate {
  id: String
  firebaseAuthUid: String
  email: String
  imageUrl: String
  disabled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type UserMaxAggregate {
  id: String
  firebaseAuthUid: String
  email: String
  imageUrl: String
  disabled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type IsValid {
  isValid: Boolean!
}

type ProfileCountAggregate {
  id: Int!
  userId: Int!
  username: Int!
  firstName: Int!
  lastName: Int!
  nickName: Int!
  showOnlyNickname: Int!
  birthday: Int!
  showAge: Int!
  position: Int!
  bio: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ProfileAvgAggregate {
  id: Float
}

type ProfileSumAggregate {
  id: Int
}

type ProfileMinAggregate {
  id: Int
  userId: String
  username: String
  firstName: String
  lastName: String
  nickName: String
  showOnlyNickname: Boolean
  birthday: DateTime
  showAge: Boolean
  position: String
  bio: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ProfileMaxAggregate {
  id: Int
  userId: String
  username: String
  firstName: String
  lastName: String
  nickName: String
  showOnlyNickname: Boolean
  birthday: DateTime
  showAge: Boolean
  position: String
  bio: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Auth {
  accessToken: String!
}

type Query {
  whoAmI: User!
  validateUsername(username: String!): IsValid!
  users(where: UserWhereInput!): [User!]!
  user(where: UserWhereUniqueInput!): User!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  firebaseAuthUid: StringFilter
  email: StringNullableFilter
  imageUrl: StringNullableFilter
  disabled: BoolFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  profile: ProfileRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input ProfileRelationFilter {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  id: IntFilter
  user: UserRelationFilter
  userId: StringFilter
  username: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  nickName: StringNullableFilter
  showOnlyNickname: BoolFilter
  birthday: DateTimeFilter
  showAge: BoolFilter
  position: StringFilter
  socialLinks: SocialLinkListRelationFilter
  shimokitaCollegeProfile: ShimokitaCollegeProfileRelationFilter
  myRoots: MyRootsListRelationFilter
  mySkills: MySkillsListRelationFilter
  bio: StringFilter
  tags: TagListRelationFilter
  photos: PhotoListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input SocialLinkListRelationFilter {
  every: SocialLinkWhereInput
  some: SocialLinkWhereInput
  none: SocialLinkWhereInput
}

input SocialLinkWhereInput {
  AND: [SocialLinkWhereInput!]
  OR: [SocialLinkWhereInput!]
  NOT: [SocialLinkWhereInput!]
  id: IntFilter
  profile: ProfileRelationFilter
  profileId: IntFilter
  name: StringFilter
  socialLinkType: EnumSocialLinkTypeFilter
  url: StringFilter
}

input EnumSocialLinkTypeFilter {
  equals: SocialLinkType
  in: [SocialLinkType!]
  notIn: [SocialLinkType!]
  not: NestedEnumSocialLinkTypeFilter
}

input NestedEnumSocialLinkTypeFilter {
  equals: SocialLinkType
  in: [SocialLinkType!]
  notIn: [SocialLinkType!]
  not: NestedEnumSocialLinkTypeFilter
}

input ShimokitaCollegeProfileRelationFilter {
  is: ShimokitaCollegeProfileWhereInput
  isNot: ShimokitaCollegeProfileWhereInput
}

input ShimokitaCollegeProfileWhereInput {
  AND: [ShimokitaCollegeProfileWhereInput!]
  OR: [ShimokitaCollegeProfileWhereInput!]
  NOT: [ShimokitaCollegeProfileWhereInput!]
  id: IntFilter
  profile: ProfileRelationFilter
  profileId: IntFilter
  slackEmail: StringFilter
  roomNumber: IntFilter
  postNumber: IntFilter
  programs: ProgramListRelationFilter
  houses: HouseListRelationFilter
  homes: HomeListRelationFilter
  coCos: CoCoListRelationFilter
  clubs: ClubListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ProgramListRelationFilter {
  every: ProgramWhereInput
  some: ProgramWhereInput
  none: ProgramWhereInput
}

input ProgramWhereInput {
  AND: [ProgramWhereInput!]
  OR: [ProgramWhereInput!]
  NOT: [ProgramWhereInput!]
  id: IntFilter
  name: StringFilter
  from: DateTimeNullableFilter
  to: DateTimeNullableFilter
  shimokitaCollegeProfiles: ShimokitaCollegeProfileListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input ShimokitaCollegeProfileListRelationFilter {
  every: ShimokitaCollegeProfileWhereInput
  some: ShimokitaCollegeProfileWhereInput
  none: ShimokitaCollegeProfileWhereInput
}

input HouseListRelationFilter {
  every: HouseWhereInput
  some: HouseWhereInput
  none: HouseWhereInput
}

input HouseWhereInput {
  AND: [HouseWhereInput!]
  OR: [HouseWhereInput!]
  NOT: [HouseWhereInput!]
  id: IntFilter
  name: StringFilter
  from: DateTimeNullableFilter
  to: DateTimeNullableFilter
  photos: PhotoListRelationFilter
  shimokitaCollegeProfiles: ShimokitaCollegeProfileListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PhotoListRelationFilter {
  every: PhotoWhereInput
  some: PhotoWhereInput
  none: PhotoWhereInput
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IntFilter
  imageUrl: StringFilter
  alt: StringFilter
  profiles: ProfileListRelationFilter
  houses: HouseListRelationFilter
  homes: HomeListRelationFilter
  coCos: CoCoListRelationFilter
  clubs: ClubListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ProfileListRelationFilter {
  every: ProfileWhereInput
  some: ProfileWhereInput
  none: ProfileWhereInput
}

input HomeListRelationFilter {
  every: HomeWhereInput
  some: HomeWhereInput
  none: HomeWhereInput
}

input HomeWhereInput {
  AND: [HomeWhereInput!]
  OR: [HomeWhereInput!]
  NOT: [HomeWhereInput!]
  id: IntFilter
  name: StringFilter
  from: DateTimeNullableFilter
  to: DateTimeNullableFilter
  photos: PhotoListRelationFilter
  shimokitaCollegeProfiles: ShimokitaCollegeProfileListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CoCoListRelationFilter {
  every: CoCoWhereInput
  some: CoCoWhereInput
  none: CoCoWhereInput
}

input CoCoWhereInput {
  AND: [CoCoWhereInput!]
  OR: [CoCoWhereInput!]
  NOT: [CoCoWhereInput!]
  id: IntFilter
  name: StringFilter
  imageUrl: StringNullableFilter
  slackChannel: StringNullableFilter
  description: StringNullableFilter
  photos: PhotoListRelationFilter
  shimokitaCollegeProfiles: ShimokitaCollegeProfileListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ClubListRelationFilter {
  every: ClubWhereInput
  some: ClubWhereInput
  none: ClubWhereInput
}

input ClubWhereInput {
  AND: [ClubWhereInput!]
  OR: [ClubWhereInput!]
  NOT: [ClubWhereInput!]
  id: IntFilter
  name: StringFilter
  imageUrl: StringNullableFilter
  slackChannel: StringNullableFilter
  description: StringNullableFilter
  photos: PhotoListRelationFilter
  shimokitaCollegeProfiles: ShimokitaCollegeProfileListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input MyRootsListRelationFilter {
  every: MyRootsWhereInput
  some: MyRootsWhereInput
  none: MyRootsWhereInput
}

input MyRootsWhereInput {
  AND: [MyRootsWhereInput!]
  OR: [MyRootsWhereInput!]
  NOT: [MyRootsWhereInput!]
  id: IntFilter
  profile: ProfileRelationFilter
  profileId: IntFilter
  roots: RootsRelationFilter
  rootsId: IntFilter
  from: DateTimeNullableFilter
  to: DateTimeNullableFilter
  profilesOnSkills: MySkillsListRelationFilter
}

input RootsRelationFilter {
  is: RootsWhereInput
  isNot: RootsWhereInput
}

input RootsWhereInput {
  AND: [RootsWhereInput!]
  OR: [RootsWhereInput!]
  NOT: [RootsWhereInput!]
  id: IntFilter
  name: StringFilter
  RootsType: EnumRootsTypeFilter
  googleMapUrl: StringNullableFilter
  introductionUrl: StringNullableFilter
  myRoots: MyRootsListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input EnumRootsTypeFilter {
  equals: RootsType
  in: [RootsType!]
  notIn: [RootsType!]
  not: NestedEnumRootsTypeFilter
}

input NestedEnumRootsTypeFilter {
  equals: RootsType
  in: [RootsType!]
  notIn: [RootsType!]
  not: NestedEnumRootsTypeFilter
}

input MySkillsListRelationFilter {
  every: MySkillsWhereInput
  some: MySkillsWhereInput
  none: MySkillsWhereInput
}

input MySkillsWhereInput {
  AND: [MySkillsWhereInput!]
  OR: [MySkillsWhereInput!]
  NOT: [MySkillsWhereInput!]
  profile: ProfileRelationFilter
  profileId: IntFilter
  skill: SkillRelationFilter
  skillId: IntFilter
  myRoots: MyRootsRelationFilter
  myRootsId: IntNullableFilter
}

input SkillRelationFilter {
  is: SkillWhereInput
  isNot: SkillWhereInput
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
  id: IntFilter
  name: StringFilter
  parentId: IntNullableFilter
  parent: SkillRelationFilter
  children: SkillListRelationFilter
  profiles: MySkillsListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input SkillListRelationFilter {
  every: SkillWhereInput
  some: SkillWhereInput
  none: SkillWhereInput
}

input MyRootsRelationFilter {
  is: MyRootsWhereInput
  isNot: MyRootsWhereInput
}

input TagListRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IntFilter
  name: StringFilter
  iconUrl: StringNullableFilter
  profiles: ProfileListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  id: String
  firebaseAuthUid: String
  email: String
}

type Mutation {
  login(firebaseIdToken: String!): Auth!
  registerProfile(data: ProfileCreateWithoutUserInput!): Profile!
}

input ProfileCreateWithoutUserInput {
  username: String!
  firstName: String!
  lastName: String!
  nickName: String
  showOnlyNickname: Boolean!
  birthday: DateTime!
  showAge: Boolean!
  position: String!
  socialLinks: SocialLinkCreateNestedManyWithoutProfileInput
  shimokitaCollegeProfile: ShimokitaCollegeProfileCreateNestedOneWithoutProfileInput
  myRoots: MyRootsCreateNestedManyWithoutProfileInput
  mySkills: MySkillsCreateNestedManyWithoutProfileInput
  bio: String!
  tags: TagCreateNestedManyWithoutProfilesInput
  photos: PhotoCreateNestedManyWithoutProfilesInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SocialLinkCreateNestedManyWithoutProfileInput {
  create: [SocialLinkCreateWithoutProfileInput!]
  connectOrCreate: [SocialLinkCreateOrConnectWithoutProfileInput!]
  createMany: SocialLinkCreateManyProfileInputEnvelope
  connect: [SocialLinkWhereUniqueInput!]
}

input SocialLinkCreateWithoutProfileInput {
  name: String!
  socialLinkType: SocialLinkType!
  url: String!
}

input SocialLinkCreateOrConnectWithoutProfileInput {
  where: SocialLinkWhereUniqueInput!
  create: SocialLinkCreateWithoutProfileInput!
}

input SocialLinkWhereUniqueInput {
  id: Int
}

input SocialLinkCreateManyProfileInputEnvelope {
  data: [SocialLinkCreateManyProfileInput!]!
  skipDuplicates: Boolean
}

input SocialLinkCreateManyProfileInput {
  id: Int
  name: String!
  socialLinkType: SocialLinkType!
  url: String!
}

input ShimokitaCollegeProfileCreateNestedOneWithoutProfileInput {
  create: ShimokitaCollegeProfileCreateWithoutProfileInput
  connectOrCreate: ShimokitaCollegeProfileCreateOrConnectWithoutProfileInput
  connect: ShimokitaCollegeProfileWhereUniqueInput
}

input ShimokitaCollegeProfileCreateWithoutProfileInput {
  slackEmail: String!
  roomNumber: Int!
  postNumber: Int!
  programs: ProgramCreateNestedManyWithoutShimokitaCollegeProfilesInput
  houses: HouseCreateNestedManyWithoutShimokitaCollegeProfilesInput
  homes: HomeCreateNestedManyWithoutShimokitaCollegeProfilesInput
  coCos: CoCoCreateNestedManyWithoutShimokitaCollegeProfilesInput
  clubs: ClubCreateNestedManyWithoutShimokitaCollegeProfilesInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProgramCreateNestedManyWithoutShimokitaCollegeProfilesInput {
  create: [ProgramCreateWithoutShimokitaCollegeProfilesInput!]
  connectOrCreate: [ProgramCreateOrConnectWithoutShimokitaCollegeProfilesInput!]
  connect: [ProgramWhereUniqueInput!]
}

input ProgramCreateWithoutShimokitaCollegeProfilesInput {
  name: String!
  from: DateTime
  to: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input ProgramCreateOrConnectWithoutShimokitaCollegeProfilesInput {
  where: ProgramWhereUniqueInput!
  create: ProgramCreateWithoutShimokitaCollegeProfilesInput!
}

input ProgramWhereUniqueInput {
  id: Int
  name: String
}

input HouseCreateNestedManyWithoutShimokitaCollegeProfilesInput {
  create: [HouseCreateWithoutShimokitaCollegeProfilesInput!]
  connectOrCreate: [HouseCreateOrConnectWithoutShimokitaCollegeProfilesInput!]
  connect: [HouseWhereUniqueInput!]
}

input HouseCreateWithoutShimokitaCollegeProfilesInput {
  name: String!
  from: DateTime
  to: DateTime
  photos: PhotoCreateNestedManyWithoutHousesInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoCreateNestedManyWithoutHousesInput {
  create: [PhotoCreateWithoutHousesInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutHousesInput!]
  connect: [PhotoWhereUniqueInput!]
}

input PhotoCreateWithoutHousesInput {
  imageUrl: String!
  alt: String!
  profiles: ProfileCreateNestedManyWithoutPhotosInput
  homes: HomeCreateNestedManyWithoutPhotosInput
  coCos: CoCoCreateNestedManyWithoutPhotosInput
  clubs: ClubCreateNestedManyWithoutPhotosInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProfileCreateNestedManyWithoutPhotosInput {
  create: [ProfileCreateWithoutPhotosInput!]
  connectOrCreate: [ProfileCreateOrConnectWithoutPhotosInput!]
  connect: [ProfileWhereUniqueInput!]
}

input ProfileCreateWithoutPhotosInput {
  user: UserCreateNestedOneWithoutProfileInput!
  username: String!
  firstName: String!
  lastName: String!
  nickName: String
  showOnlyNickname: Boolean!
  birthday: DateTime!
  showAge: Boolean!
  position: String!
  socialLinks: SocialLinkCreateNestedManyWithoutProfileInput
  shimokitaCollegeProfile: ShimokitaCollegeProfileCreateNestedOneWithoutProfileInput
  myRoots: MyRootsCreateNestedManyWithoutProfileInput
  mySkills: MySkillsCreateNestedManyWithoutProfileInput
  bio: String!
  tags: TagCreateNestedManyWithoutProfilesInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  connectOrCreate: UserCreateOrConnectWithoutProfileInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProfileInput {
  id: String
  firebaseAuthUid: String!
  email: String
  imageUrl: String
  disabled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateOrConnectWithoutProfileInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutProfileInput!
}

input MyRootsCreateNestedManyWithoutProfileInput {
  create: [MyRootsCreateWithoutProfileInput!]
  connectOrCreate: [MyRootsCreateOrConnectWithoutProfileInput!]
  createMany: MyRootsCreateManyProfileInputEnvelope
  connect: [MyRootsWhereUniqueInput!]
}

input MyRootsCreateWithoutProfileInput {
  roots: RootsCreateNestedOneWithoutMyRootsInput!
  from: DateTime
  to: DateTime
  profilesOnSkills: MySkillsCreateNestedManyWithoutMyRootsInput
}

input RootsCreateNestedOneWithoutMyRootsInput {
  create: RootsCreateWithoutMyRootsInput
  connectOrCreate: RootsCreateOrConnectWithoutMyRootsInput
  connect: RootsWhereUniqueInput
}

input RootsCreateWithoutMyRootsInput {
  name: String!
  RootsType: RootsType!
  googleMapUrl: String
  introductionUrl: String
  createdAt: DateTime
  updatedAt: DateTime
}

input RootsCreateOrConnectWithoutMyRootsInput {
  where: RootsWhereUniqueInput!
  create: RootsCreateWithoutMyRootsInput!
}

input RootsWhereUniqueInput {
  id: Int
  name: String
}

input MySkillsCreateNestedManyWithoutMyRootsInput {
  create: [MySkillsCreateWithoutMyRootsInput!]
  connectOrCreate: [MySkillsCreateOrConnectWithoutMyRootsInput!]
  createMany: MySkillsCreateManyMyRootsInputEnvelope
  connect: [MySkillsWhereUniqueInput!]
}

input MySkillsCreateWithoutMyRootsInput {
  profile: ProfileCreateNestedOneWithoutMySkillsInput!
  skill: SkillCreateNestedOneWithoutProfilesInput!
}

input ProfileCreateNestedOneWithoutMySkillsInput {
  create: ProfileCreateWithoutMySkillsInput
  connectOrCreate: ProfileCreateOrConnectWithoutMySkillsInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateWithoutMySkillsInput {
  user: UserCreateNestedOneWithoutProfileInput!
  username: String!
  firstName: String!
  lastName: String!
  nickName: String
  showOnlyNickname: Boolean!
  birthday: DateTime!
  showAge: Boolean!
  position: String!
  socialLinks: SocialLinkCreateNestedManyWithoutProfileInput
  shimokitaCollegeProfile: ShimokitaCollegeProfileCreateNestedOneWithoutProfileInput
  myRoots: MyRootsCreateNestedManyWithoutProfileInput
  bio: String!
  tags: TagCreateNestedManyWithoutProfilesInput
  photos: PhotoCreateNestedManyWithoutProfilesInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TagCreateNestedManyWithoutProfilesInput {
  create: [TagCreateWithoutProfilesInput!]
  connectOrCreate: [TagCreateOrConnectWithoutProfilesInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutProfilesInput {
  name: String!
  iconUrl: String
  createdAt: DateTime
  updatedAt: DateTime
}

input TagCreateOrConnectWithoutProfilesInput {
  where: TagWhereUniqueInput!
  create: TagCreateWithoutProfilesInput!
}

input TagWhereUniqueInput {
  id: Int
}

input PhotoCreateNestedManyWithoutProfilesInput {
  create: [PhotoCreateWithoutProfilesInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutProfilesInput!]
  connect: [PhotoWhereUniqueInput!]
}

input PhotoCreateWithoutProfilesInput {
  imageUrl: String!
  alt: String!
  houses: HouseCreateNestedManyWithoutPhotosInput
  homes: HomeCreateNestedManyWithoutPhotosInput
  coCos: CoCoCreateNestedManyWithoutPhotosInput
  clubs: ClubCreateNestedManyWithoutPhotosInput
  createdAt: DateTime
  updatedAt: DateTime
}

input HouseCreateNestedManyWithoutPhotosInput {
  create: [HouseCreateWithoutPhotosInput!]
  connectOrCreate: [HouseCreateOrConnectWithoutPhotosInput!]
  connect: [HouseWhereUniqueInput!]
}

input HouseCreateWithoutPhotosInput {
  name: String!
  from: DateTime
  to: DateTime
  shimokitaCollegeProfiles: ShimokitaCollegeProfileCreateNestedManyWithoutHousesInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ShimokitaCollegeProfileCreateNestedManyWithoutHousesInput {
  create: [ShimokitaCollegeProfileCreateWithoutHousesInput!]
  connectOrCreate: [ShimokitaCollegeProfileCreateOrConnectWithoutHousesInput!]
  connect: [ShimokitaCollegeProfileWhereUniqueInput!]
}

input ShimokitaCollegeProfileCreateWithoutHousesInput {
  profile: ProfileCreateNestedOneWithoutShimokitaCollegeProfileInput!
  slackEmail: String!
  roomNumber: Int!
  postNumber: Int!
  programs: ProgramCreateNestedManyWithoutShimokitaCollegeProfilesInput
  homes: HomeCreateNestedManyWithoutShimokitaCollegeProfilesInput
  coCos: CoCoCreateNestedManyWithoutShimokitaCollegeProfilesInput
  clubs: ClubCreateNestedManyWithoutShimokitaCollegeProfilesInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProfileCreateNestedOneWithoutShimokitaCollegeProfileInput {
  create: ProfileCreateWithoutShimokitaCollegeProfileInput
  connectOrCreate: ProfileCreateOrConnectWithoutShimokitaCollegeProfileInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateWithoutShimokitaCollegeProfileInput {
  user: UserCreateNestedOneWithoutProfileInput!
  username: String!
  firstName: String!
  lastName: String!
  nickName: String
  showOnlyNickname: Boolean!
  birthday: DateTime!
  showAge: Boolean!
  position: String!
  socialLinks: SocialLinkCreateNestedManyWithoutProfileInput
  myRoots: MyRootsCreateNestedManyWithoutProfileInput
  mySkills: MySkillsCreateNestedManyWithoutProfileInput
  bio: String!
  tags: TagCreateNestedManyWithoutProfilesInput
  photos: PhotoCreateNestedManyWithoutProfilesInput
  createdAt: DateTime
  updatedAt: DateTime
}

input MySkillsCreateNestedManyWithoutProfileInput {
  create: [MySkillsCreateWithoutProfileInput!]
  connectOrCreate: [MySkillsCreateOrConnectWithoutProfileInput!]
  createMany: MySkillsCreateManyProfileInputEnvelope
  connect: [MySkillsWhereUniqueInput!]
}

input MySkillsCreateWithoutProfileInput {
  skill: SkillCreateNestedOneWithoutProfilesInput!
  myRoots: MyRootsCreateNestedOneWithoutProfilesOnSkillsInput
}

input SkillCreateNestedOneWithoutProfilesInput {
  create: SkillCreateWithoutProfilesInput
  connectOrCreate: SkillCreateOrConnectWithoutProfilesInput
  connect: SkillWhereUniqueInput
}

input SkillCreateWithoutProfilesInput {
  name: String!
  parent: SkillCreateNestedOneWithoutChildrenInput
  children: SkillCreateNestedManyWithoutParentInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SkillCreateNestedOneWithoutChildrenInput {
  create: SkillCreateWithoutChildrenInput
  connectOrCreate: SkillCreateOrConnectWithoutChildrenInput
  connect: SkillWhereUniqueInput
}

input SkillCreateWithoutChildrenInput {
  name: String!
  parent: SkillCreateNestedOneWithoutChildrenInput
  profiles: MySkillsCreateNestedManyWithoutSkillInput
  createdAt: DateTime
  updatedAt: DateTime
}

input MySkillsCreateNestedManyWithoutSkillInput {
  create: [MySkillsCreateWithoutSkillInput!]
  connectOrCreate: [MySkillsCreateOrConnectWithoutSkillInput!]
  createMany: MySkillsCreateManySkillInputEnvelope
  connect: [MySkillsWhereUniqueInput!]
}

input MySkillsCreateWithoutSkillInput {
  profile: ProfileCreateNestedOneWithoutMySkillsInput!
  myRoots: MyRootsCreateNestedOneWithoutProfilesOnSkillsInput
}

input MyRootsCreateNestedOneWithoutProfilesOnSkillsInput {
  create: MyRootsCreateWithoutProfilesOnSkillsInput
  connectOrCreate: MyRootsCreateOrConnectWithoutProfilesOnSkillsInput
  connect: MyRootsWhereUniqueInput
}

input MyRootsCreateWithoutProfilesOnSkillsInput {
  profile: ProfileCreateNestedOneWithoutMyRootsInput!
  roots: RootsCreateNestedOneWithoutMyRootsInput!
  from: DateTime
  to: DateTime
}

input ProfileCreateNestedOneWithoutMyRootsInput {
  create: ProfileCreateWithoutMyRootsInput
  connectOrCreate: ProfileCreateOrConnectWithoutMyRootsInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateWithoutMyRootsInput {
  user: UserCreateNestedOneWithoutProfileInput!
  username: String!
  firstName: String!
  lastName: String!
  nickName: String
  showOnlyNickname: Boolean!
  birthday: DateTime!
  showAge: Boolean!
  position: String!
  socialLinks: SocialLinkCreateNestedManyWithoutProfileInput
  shimokitaCollegeProfile: ShimokitaCollegeProfileCreateNestedOneWithoutProfileInput
  mySkills: MySkillsCreateNestedManyWithoutProfileInput
  bio: String!
  tags: TagCreateNestedManyWithoutProfilesInput
  photos: PhotoCreateNestedManyWithoutProfilesInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProfileCreateOrConnectWithoutMyRootsInput {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutMyRootsInput!
}

input ProfileWhereUniqueInput {
  id: Int
  userId: String
  username: String
}

input MyRootsCreateOrConnectWithoutProfilesOnSkillsInput {
  where: MyRootsWhereUniqueInput!
  create: MyRootsCreateWithoutProfilesOnSkillsInput!
}

input MyRootsWhereUniqueInput {
  id: Int
}

input MySkillsCreateOrConnectWithoutSkillInput {
  where: MySkillsWhereUniqueInput!
  create: MySkillsCreateWithoutSkillInput!
}

input MySkillsWhereUniqueInput {
  profileId_skillId: MySkillsProfileIdSkillIdCompoundUniqueInput
}

input MySkillsProfileIdSkillIdCompoundUniqueInput {
  profileId: Int!
  skillId: Int!
}

input MySkillsCreateManySkillInputEnvelope {
  data: [MySkillsCreateManySkillInput!]!
  skipDuplicates: Boolean
}

input MySkillsCreateManySkillInput {
  profileId: Int!
  myRootsId: Int
}

input SkillCreateOrConnectWithoutChildrenInput {
  where: SkillWhereUniqueInput!
  create: SkillCreateWithoutChildrenInput!
}

input SkillWhereUniqueInput {
  id: Int
  name: String
}

input SkillCreateNestedManyWithoutParentInput {
  create: [SkillCreateWithoutParentInput!]
  connectOrCreate: [SkillCreateOrConnectWithoutParentInput!]
  createMany: SkillCreateManyParentInputEnvelope
  connect: [SkillWhereUniqueInput!]
}

input SkillCreateWithoutParentInput {
  name: String!
  children: SkillCreateNestedManyWithoutParentInput
  profiles: MySkillsCreateNestedManyWithoutSkillInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SkillCreateOrConnectWithoutParentInput {
  where: SkillWhereUniqueInput!
  create: SkillCreateWithoutParentInput!
}

input SkillCreateManyParentInputEnvelope {
  data: [SkillCreateManyParentInput!]!
  skipDuplicates: Boolean
}

input SkillCreateManyParentInput {
  id: Int
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input SkillCreateOrConnectWithoutProfilesInput {
  where: SkillWhereUniqueInput!
  create: SkillCreateWithoutProfilesInput!
}

input MySkillsCreateOrConnectWithoutProfileInput {
  where: MySkillsWhereUniqueInput!
  create: MySkillsCreateWithoutProfileInput!
}

input MySkillsCreateManyProfileInputEnvelope {
  data: [MySkillsCreateManyProfileInput!]!
  skipDuplicates: Boolean
}

input MySkillsCreateManyProfileInput {
  skillId: Int!
  myRootsId: Int
}

input ProfileCreateOrConnectWithoutShimokitaCollegeProfileInput {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutShimokitaCollegeProfileInput!
}

input HomeCreateNestedManyWithoutShimokitaCollegeProfilesInput {
  create: [HomeCreateWithoutShimokitaCollegeProfilesInput!]
  connectOrCreate: [HomeCreateOrConnectWithoutShimokitaCollegeProfilesInput!]
  connect: [HomeWhereUniqueInput!]
}

input HomeCreateWithoutShimokitaCollegeProfilesInput {
  name: String!
  from: DateTime
  to: DateTime
  photos: PhotoCreateNestedManyWithoutHomesInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoCreateNestedManyWithoutHomesInput {
  create: [PhotoCreateWithoutHomesInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutHomesInput!]
  connect: [PhotoWhereUniqueInput!]
}

input PhotoCreateWithoutHomesInput {
  imageUrl: String!
  alt: String!
  profiles: ProfileCreateNestedManyWithoutPhotosInput
  houses: HouseCreateNestedManyWithoutPhotosInput
  coCos: CoCoCreateNestedManyWithoutPhotosInput
  clubs: ClubCreateNestedManyWithoutPhotosInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CoCoCreateNestedManyWithoutPhotosInput {
  create: [CoCoCreateWithoutPhotosInput!]
  connectOrCreate: [CoCoCreateOrConnectWithoutPhotosInput!]
  connect: [CoCoWhereUniqueInput!]
}

input CoCoCreateWithoutPhotosInput {
  name: String!
  imageUrl: String
  slackChannel: String
  description: String
  shimokitaCollegeProfiles: ShimokitaCollegeProfileCreateNestedManyWithoutCoCosInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ShimokitaCollegeProfileCreateNestedManyWithoutCoCosInput {
  create: [ShimokitaCollegeProfileCreateWithoutCoCosInput!]
  connectOrCreate: [ShimokitaCollegeProfileCreateOrConnectWithoutCoCosInput!]
  connect: [ShimokitaCollegeProfileWhereUniqueInput!]
}

input ShimokitaCollegeProfileCreateWithoutCoCosInput {
  profile: ProfileCreateNestedOneWithoutShimokitaCollegeProfileInput!
  slackEmail: String!
  roomNumber: Int!
  postNumber: Int!
  programs: ProgramCreateNestedManyWithoutShimokitaCollegeProfilesInput
  houses: HouseCreateNestedManyWithoutShimokitaCollegeProfilesInput
  homes: HomeCreateNestedManyWithoutShimokitaCollegeProfilesInput
  clubs: ClubCreateNestedManyWithoutShimokitaCollegeProfilesInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ClubCreateNestedManyWithoutShimokitaCollegeProfilesInput {
  create: [ClubCreateWithoutShimokitaCollegeProfilesInput!]
  connectOrCreate: [ClubCreateOrConnectWithoutShimokitaCollegeProfilesInput!]
  connect: [ClubWhereUniqueInput!]
}

input ClubCreateWithoutShimokitaCollegeProfilesInput {
  name: String!
  imageUrl: String
  slackChannel: String
  description: String
  photos: PhotoCreateNestedManyWithoutClubsInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoCreateNestedManyWithoutClubsInput {
  create: [PhotoCreateWithoutClubsInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutClubsInput!]
  connect: [PhotoWhereUniqueInput!]
}

input PhotoCreateWithoutClubsInput {
  imageUrl: String!
  alt: String!
  profiles: ProfileCreateNestedManyWithoutPhotosInput
  houses: HouseCreateNestedManyWithoutPhotosInput
  homes: HomeCreateNestedManyWithoutPhotosInput
  coCos: CoCoCreateNestedManyWithoutPhotosInput
  createdAt: DateTime
  updatedAt: DateTime
}

input HomeCreateNestedManyWithoutPhotosInput {
  create: [HomeCreateWithoutPhotosInput!]
  connectOrCreate: [HomeCreateOrConnectWithoutPhotosInput!]
  connect: [HomeWhereUniqueInput!]
}

input HomeCreateWithoutPhotosInput {
  name: String!
  from: DateTime
  to: DateTime
  shimokitaCollegeProfiles: ShimokitaCollegeProfileCreateNestedManyWithoutHomesInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ShimokitaCollegeProfileCreateNestedManyWithoutHomesInput {
  create: [ShimokitaCollegeProfileCreateWithoutHomesInput!]
  connectOrCreate: [ShimokitaCollegeProfileCreateOrConnectWithoutHomesInput!]
  connect: [ShimokitaCollegeProfileWhereUniqueInput!]
}

input ShimokitaCollegeProfileCreateWithoutHomesInput {
  profile: ProfileCreateNestedOneWithoutShimokitaCollegeProfileInput!
  slackEmail: String!
  roomNumber: Int!
  postNumber: Int!
  programs: ProgramCreateNestedManyWithoutShimokitaCollegeProfilesInput
  houses: HouseCreateNestedManyWithoutShimokitaCollegeProfilesInput
  coCos: CoCoCreateNestedManyWithoutShimokitaCollegeProfilesInput
  clubs: ClubCreateNestedManyWithoutShimokitaCollegeProfilesInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CoCoCreateNestedManyWithoutShimokitaCollegeProfilesInput {
  create: [CoCoCreateWithoutShimokitaCollegeProfilesInput!]
  connectOrCreate: [CoCoCreateOrConnectWithoutShimokitaCollegeProfilesInput!]
  connect: [CoCoWhereUniqueInput!]
}

input CoCoCreateWithoutShimokitaCollegeProfilesInput {
  name: String!
  imageUrl: String
  slackChannel: String
  description: String
  photos: PhotoCreateNestedManyWithoutCoCosInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoCreateNestedManyWithoutCoCosInput {
  create: [PhotoCreateWithoutCoCosInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutCoCosInput!]
  connect: [PhotoWhereUniqueInput!]
}

input PhotoCreateWithoutCoCosInput {
  imageUrl: String!
  alt: String!
  profiles: ProfileCreateNestedManyWithoutPhotosInput
  houses: HouseCreateNestedManyWithoutPhotosInput
  homes: HomeCreateNestedManyWithoutPhotosInput
  clubs: ClubCreateNestedManyWithoutPhotosInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ClubCreateNestedManyWithoutPhotosInput {
  create: [ClubCreateWithoutPhotosInput!]
  connectOrCreate: [ClubCreateOrConnectWithoutPhotosInput!]
  connect: [ClubWhereUniqueInput!]
}

input ClubCreateWithoutPhotosInput {
  name: String!
  imageUrl: String
  slackChannel: String
  description: String
  shimokitaCollegeProfiles: ShimokitaCollegeProfileCreateNestedManyWithoutClubsInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ShimokitaCollegeProfileCreateNestedManyWithoutClubsInput {
  create: [ShimokitaCollegeProfileCreateWithoutClubsInput!]
  connectOrCreate: [ShimokitaCollegeProfileCreateOrConnectWithoutClubsInput!]
  connect: [ShimokitaCollegeProfileWhereUniqueInput!]
}

input ShimokitaCollegeProfileCreateWithoutClubsInput {
  profile: ProfileCreateNestedOneWithoutShimokitaCollegeProfileInput!
  slackEmail: String!
  roomNumber: Int!
  postNumber: Int!
  programs: ProgramCreateNestedManyWithoutShimokitaCollegeProfilesInput
  houses: HouseCreateNestedManyWithoutShimokitaCollegeProfilesInput
  homes: HomeCreateNestedManyWithoutShimokitaCollegeProfilesInput
  coCos: CoCoCreateNestedManyWithoutShimokitaCollegeProfilesInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ShimokitaCollegeProfileCreateOrConnectWithoutClubsInput {
  where: ShimokitaCollegeProfileWhereUniqueInput!
  create: ShimokitaCollegeProfileCreateWithoutClubsInput!
}

input ShimokitaCollegeProfileWhereUniqueInput {
  id: Int
  profileId: Int
  slackEmail: String
}

input ClubCreateOrConnectWithoutPhotosInput {
  where: ClubWhereUniqueInput!
  create: ClubCreateWithoutPhotosInput!
}

input ClubWhereUniqueInput {
  id: Int
  name: String
}

input PhotoCreateOrConnectWithoutCoCosInput {
  where: PhotoWhereUniqueInput!
  create: PhotoCreateWithoutCoCosInput!
}

input PhotoWhereUniqueInput {
  id: Int
}

input CoCoCreateOrConnectWithoutShimokitaCollegeProfilesInput {
  where: CoCoWhereUniqueInput!
  create: CoCoCreateWithoutShimokitaCollegeProfilesInput!
}

input CoCoWhereUniqueInput {
  id: Int
  name: String
}

input ShimokitaCollegeProfileCreateOrConnectWithoutHomesInput {
  where: ShimokitaCollegeProfileWhereUniqueInput!
  create: ShimokitaCollegeProfileCreateWithoutHomesInput!
}

input HomeCreateOrConnectWithoutPhotosInput {
  where: HomeWhereUniqueInput!
  create: HomeCreateWithoutPhotosInput!
}

input HomeWhereUniqueInput {
  id: Int
  name: String
}

input PhotoCreateOrConnectWithoutClubsInput {
  where: PhotoWhereUniqueInput!
  create: PhotoCreateWithoutClubsInput!
}

input ClubCreateOrConnectWithoutShimokitaCollegeProfilesInput {
  where: ClubWhereUniqueInput!
  create: ClubCreateWithoutShimokitaCollegeProfilesInput!
}

input ShimokitaCollegeProfileCreateOrConnectWithoutCoCosInput {
  where: ShimokitaCollegeProfileWhereUniqueInput!
  create: ShimokitaCollegeProfileCreateWithoutCoCosInput!
}

input CoCoCreateOrConnectWithoutPhotosInput {
  where: CoCoWhereUniqueInput!
  create: CoCoCreateWithoutPhotosInput!
}

input PhotoCreateOrConnectWithoutHomesInput {
  where: PhotoWhereUniqueInput!
  create: PhotoCreateWithoutHomesInput!
}

input HomeCreateOrConnectWithoutShimokitaCollegeProfilesInput {
  where: HomeWhereUniqueInput!
  create: HomeCreateWithoutShimokitaCollegeProfilesInput!
}

input ShimokitaCollegeProfileCreateOrConnectWithoutHousesInput {
  where: ShimokitaCollegeProfileWhereUniqueInput!
  create: ShimokitaCollegeProfileCreateWithoutHousesInput!
}

input HouseCreateOrConnectWithoutPhotosInput {
  where: HouseWhereUniqueInput!
  create: HouseCreateWithoutPhotosInput!
}

input HouseWhereUniqueInput {
  id: Int
  name: String
}

input PhotoCreateOrConnectWithoutProfilesInput {
  where: PhotoWhereUniqueInput!
  create: PhotoCreateWithoutProfilesInput!
}

input ProfileCreateOrConnectWithoutMySkillsInput {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutMySkillsInput!
}

input MySkillsCreateOrConnectWithoutMyRootsInput {
  where: MySkillsWhereUniqueInput!
  create: MySkillsCreateWithoutMyRootsInput!
}

input MySkillsCreateManyMyRootsInputEnvelope {
  data: [MySkillsCreateManyMyRootsInput!]!
  skipDuplicates: Boolean
}

input MySkillsCreateManyMyRootsInput {
  profileId: Int!
  skillId: Int!
}

input MyRootsCreateOrConnectWithoutProfileInput {
  where: MyRootsWhereUniqueInput!
  create: MyRootsCreateWithoutProfileInput!
}

input MyRootsCreateManyProfileInputEnvelope {
  data: [MyRootsCreateManyProfileInput!]!
  skipDuplicates: Boolean
}

input MyRootsCreateManyProfileInput {
  id: Int
  rootsId: Int!
  from: DateTime
  to: DateTime
}

input ProfileCreateOrConnectWithoutPhotosInput {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutPhotosInput!
}

input PhotoCreateOrConnectWithoutHousesInput {
  where: PhotoWhereUniqueInput!
  create: PhotoCreateWithoutHousesInput!
}

input HouseCreateOrConnectWithoutShimokitaCollegeProfilesInput {
  where: HouseWhereUniqueInput!
  create: HouseCreateWithoutShimokitaCollegeProfilesInput!
}

input ShimokitaCollegeProfileCreateOrConnectWithoutProfileInput {
  where: ShimokitaCollegeProfileWhereUniqueInput!
  create: ShimokitaCollegeProfileCreateWithoutProfileInput!
}