type AuthLogin {
  accessToken: String!
}

type IsValid {
  isValid: Boolean!
}

type UserCountAggregate {
  id: Int!
  firebaseAuthUid: Int!
  email: Int!
  disabled: Int!
  imageUrl: Int!
  username: Int!
  firstName: Int!
  lastName: Int!
  nickName: Int!
  showOnlyNickname: Int!
  birthday: Int!
  hideAge: Int!
  position: Int!
  isAlumni: Int!
  roomNumber: Int!
  postNumber: Int!
  bio: Int!
  photoUrls: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type UserAvgAggregate {
  roomNumber: Float
  postNumber: Float
}

type UserSumAggregate {
  roomNumber: Int
  postNumber: Int
}

type UserMinAggregate {
  id: String
  firebaseAuthUid: String
  email: String
  disabled: Boolean
  imageUrl: String
  username: String
  firstName: String
  lastName: String
  nickName: String
  showOnlyNickname: Boolean
  birthday: DateTime
  hideAge: Boolean
  position: String
  isAlumni: Boolean
  roomNumber: Int
  postNumber: Int
  bio: String
  createdAt: DateTime
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserMaxAggregate {
  id: String
  firebaseAuthUid: String
  email: String
  disabled: Boolean
  imageUrl: String
  username: String
  firstName: String
  lastName: String
  nickName: String
  showOnlyNickname: Boolean
  birthday: DateTime
  hideAge: Boolean
  position: String
  isAlumni: Boolean
  roomNumber: Int
  postNumber: Int
  bio: String
  createdAt: DateTime
  updatedAt: DateTime
}

type UserCount {
  socialLinks: Int!
  groups: Int!
  roots: Int!
  skills: Int!
  tags: Int!
}

type SocialLink {
  id: ID!
  user: User!
  userId: String!
  name: String!
  socialLinkType: SocialLinkType!
  url: String!
}

enum SocialLinkType {
  WEBSITE
  INSTAGRAM
  TWITTER
  FACEBOOK
  LINE
  SNAPCHAT
  TIKTOK
  YOUTUBE
  GITHUB
  LINKTREE
  OTHER
}

type GroupCount {
  users: Int!
}

type Group {
  id: ID!
  groupType: GroupType!
  name: String!
  from: DateTime
  to: DateTime
  emoji: String
  imageUrl: String
  slackChannel: String
  description: String
  photoUrls: [String!]
  users: [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: GroupCount!
}

enum GroupType {
  PROGRAM
  HOUSE
  HOME
  COMMITTEE
  CLUB
}

type RootsCount {
  users: Int!
}

type Roots {
  id: ID!
  name: String!
  rootsType: RootsType!
  googleMapUrl: String
  introductionUrl: String
  users: [UserRootsTracing!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: RootsCount!
}

enum RootsType {
  COUNTRY
  HOMETOWN
  EDUCATION
  WORK
  GROUP
}

type SkillCount {
  children: Int!
  users: Int!
}

type Skill {
  id: ID!
  name: String!
  parentId: Int
  parent: Skill
  children: [Skill!]
  users: [UserSkillAcquisition!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: SkillCount!
}

type UserSkillAcquisition {
  user: User!
  userId: String!
  skill: Skill!
  skillId: Int!
  userRootsTracing: UserRootsTracing
  rootsId: Int
}

type UserRootsTracingCount {
  userSkillAcquisitions: Int!
}

type UserRootsTracing {
  user: User!
  userId: String!
  roots: Roots!
  rootsId: Int!
  from: DateTime
  to: DateTime
  userSkillAcquisitions: [UserSkillAcquisition!]
  _count: UserRootsTracingCount!
}

type TagCount {
  users: Int!
}

type Tag {
  id: ID!
  name: String!
  iconUrl: String
  users: [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: TagCount!
}

type User {
  id: ID!
  firebaseAuthUid: String!
  email: String!
  disabled: Boolean!
  imageUrl: String
  username: String
  firstName: String!
  lastName: String!
  nickName: String
  showOnlyNickname: Boolean!
  birthday: DateTime!
  hideAge: Boolean!
  position: String!
  socialLinks: [SocialLink!]
  isAlumni: Boolean!

  """
  @Validator.@Min(100)
  @Validator.@Max(599)
  """
  roomNumber: Int!

  """
  @Validator.@Min(100)
  @Validator.@Max(599)
  """
  postNumber: Int!
  groups: [Group!]
  roots: [UserRootsTracing!]
  skills: [UserSkillAcquisition!]
  bio: String!
  tags: [Tag!]
  photoUrls: [String!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: UserCount!
}

type AuthSignup {
  accessToken: String!
  user: User!
}

type Query {
  """{ Authorization: Bearer <accessToken> }"""
  whoAmI: User!

  """{ Authorization: Bearer <accessToken> }"""
  users(where: UserWhereInput!): [User!]!

  """{ Authorization: Bearer <accessToken> }"""
  user(where: UserWhereUniqueInput!): User!

  """{ Authorization: Bearer <firebaseIdToken> }"""
  validateUsername(username: String!): IsValid!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  firebaseAuthUid: StringFilter
  email: StringFilter
  disabled: BoolFilter
  imageUrl: StringNullableFilter
  username: StringNullableFilter
  firstName: StringFilter
  lastName: StringFilter
  nickName: StringNullableFilter
  showOnlyNickname: BoolFilter
  birthday: DateTimeFilter
  hideAge: BoolFilter
  position: StringFilter
  socialLinks: SocialLinkListRelationFilter
  isAlumni: BoolFilter
  roomNumber: IntFilter
  postNumber: IntFilter
  groups: GroupListRelationFilter
  roots: UserRootsTracingListRelationFilter
  skills: UserSkillAcquisitionListRelationFilter
  bio: StringFilter
  tags: TagListRelationFilter
  photoUrls: StringNullableListFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input SocialLinkListRelationFilter {
  every: SocialLinkWhereInput
  some: SocialLinkWhereInput
  none: SocialLinkWhereInput
}

input SocialLinkWhereInput {
  AND: [SocialLinkWhereInput!]
  OR: [SocialLinkWhereInput!]
  NOT: [SocialLinkWhereInput!]
  id: IntFilter
  user: UserRelationFilter
  userId: StringFilter
  name: StringFilter
  socialLinkType: EnumSocialLinkTypeFilter
  url: StringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input EnumSocialLinkTypeFilter {
  equals: SocialLinkType
  in: [SocialLinkType!]
  notIn: [SocialLinkType!]
  not: NestedEnumSocialLinkTypeFilter
}

input NestedEnumSocialLinkTypeFilter {
  equals: SocialLinkType
  in: [SocialLinkType!]
  notIn: [SocialLinkType!]
  not: NestedEnumSocialLinkTypeFilter
}

input GroupListRelationFilter {
  every: GroupWhereInput
  some: GroupWhereInput
  none: GroupWhereInput
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: IntFilter
  groupType: EnumGroupTypeFilter
  name: StringFilter
  from: DateTimeNullableFilter
  to: DateTimeNullableFilter
  emoji: StringNullableFilter
  imageUrl: StringNullableFilter
  slackChannel: StringNullableFilter
  description: StringNullableFilter
  photoUrls: StringNullableListFilter
  users: UserListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input EnumGroupTypeFilter {
  equals: GroupType
  in: [GroupType!]
  notIn: [GroupType!]
  not: NestedEnumGroupTypeFilter
}

input NestedEnumGroupTypeFilter {
  equals: GroupType
  in: [GroupType!]
  notIn: [GroupType!]
  not: NestedEnumGroupTypeFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input UserRootsTracingListRelationFilter {
  every: UserRootsTracingWhereInput
  some: UserRootsTracingWhereInput
  none: UserRootsTracingWhereInput
}

input UserRootsTracingWhereInput {
  AND: [UserRootsTracingWhereInput!]
  OR: [UserRootsTracingWhereInput!]
  NOT: [UserRootsTracingWhereInput!]
  user: UserRelationFilter
  userId: StringFilter
  roots: RootsRelationFilter
  rootsId: IntFilter
  from: DateTimeNullableFilter
  to: DateTimeNullableFilter
  userSkillAcquisitions: UserSkillAcquisitionListRelationFilter
}

input RootsRelationFilter {
  is: RootsWhereInput
  isNot: RootsWhereInput
}

input RootsWhereInput {
  AND: [RootsWhereInput!]
  OR: [RootsWhereInput!]
  NOT: [RootsWhereInput!]
  id: IntFilter
  name: StringFilter
  rootsType: EnumRootsTypeFilter
  googleMapUrl: StringNullableFilter
  introductionUrl: StringNullableFilter
  users: UserRootsTracingListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input EnumRootsTypeFilter {
  equals: RootsType
  in: [RootsType!]
  notIn: [RootsType!]
  not: NestedEnumRootsTypeFilter
}

input NestedEnumRootsTypeFilter {
  equals: RootsType
  in: [RootsType!]
  notIn: [RootsType!]
  not: NestedEnumRootsTypeFilter
}

input UserSkillAcquisitionListRelationFilter {
  every: UserSkillAcquisitionWhereInput
  some: UserSkillAcquisitionWhereInput
  none: UserSkillAcquisitionWhereInput
}

input UserSkillAcquisitionWhereInput {
  AND: [UserSkillAcquisitionWhereInput!]
  OR: [UserSkillAcquisitionWhereInput!]
  NOT: [UserSkillAcquisitionWhereInput!]
  user: UserRelationFilter
  userId: StringFilter
  skill: SkillRelationFilter
  skillId: IntFilter
  userRootsTracing: UserRootsTracingRelationFilter
  rootsId: IntNullableFilter
}

input SkillRelationFilter {
  is: SkillWhereInput
  isNot: SkillWhereInput
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
  id: IntFilter
  name: StringFilter
  parentId: IntNullableFilter
  parent: SkillRelationFilter
  children: SkillListRelationFilter
  users: UserSkillAcquisitionListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input SkillListRelationFilter {
  every: SkillWhereInput
  some: SkillWhereInput
  none: SkillWhereInput
}

input UserRootsTracingRelationFilter {
  is: UserRootsTracingWhereInput
  isNot: UserRootsTracingWhereInput
}

input TagListRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IntFilter
  name: StringFilter
  iconUrl: StringNullableFilter
  users: UserListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  id: String
  firebaseAuthUid: String
  email: String
  username: String
}

type Mutation {
  """{ Authorization: Bearer <firebaseIdToken> }"""
  login: AuthLogin!

  """{ Authorization: Bearer <firebaseIdToken> }"""
  signup(data: AuthSignupInput!): AuthSignup!
}

input AuthSignupInput {
  email: String!
  imageUrl: String
  username: String
  firstName: String!
  lastName: String!
  nickName: String
  showOnlyNickname: Boolean
  birthday: DateTime!
  hideAge: Boolean
  position: String!
  socialLinks: SocialLinkCreateNestedManyWithoutUserInput
  isAlumni: Boolean
  roomNumber: Int!
  postNumber: Int!
  groups: GroupCreateNestedManyWithoutUsersInput
  roots: UserRootsTracingCreateNestedManyWithoutUserInput
  skills: UserSkillAcquisitionCreateNestedManyWithoutUserInput
  bio: String!
  tags: TagCreateNestedManyWithoutUsersInput
  photoUrls: UserCreatephotoUrlsInput
}

input SocialLinkCreateNestedManyWithoutUserInput {
  create: [SocialLinkCreateWithoutUserInput!]
  connectOrCreate: [SocialLinkCreateOrConnectWithoutUserInput!]
  createMany: SocialLinkCreateManyUserInputEnvelope
  connect: [SocialLinkWhereUniqueInput!]
}

input SocialLinkCreateWithoutUserInput {
  name: String!
  socialLinkType: SocialLinkType!
  url: String!
}

input SocialLinkCreateOrConnectWithoutUserInput {
  where: SocialLinkWhereUniqueInput!
  create: SocialLinkCreateWithoutUserInput!
}

input SocialLinkWhereUniqueInput {
  id: Int
}

input SocialLinkCreateManyUserInputEnvelope {
  data: [SocialLinkCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input SocialLinkCreateManyUserInput {
  id: Int
  name: String!
  socialLinkType: SocialLinkType!
  url: String!
}

input GroupCreateNestedManyWithoutUsersInput {
  create: [GroupCreateWithoutUsersInput!]
  connectOrCreate: [GroupCreateOrConnectWithoutUsersInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateWithoutUsersInput {
  groupType: GroupType!
  name: String!
  from: DateTime
  to: DateTime
  emoji: String
  imageUrl: String
  slackChannel: String
  description: String
  photoUrls: GroupCreatephotoUrlsInput
  createdAt: DateTime
  updatedAt: DateTime
}

input GroupCreatephotoUrlsInput {
  set: [String!]!
}

input GroupCreateOrConnectWithoutUsersInput {
  where: GroupWhereUniqueInput!
  create: GroupCreateWithoutUsersInput!
}

input GroupWhereUniqueInput {
  id: Int
  groupType_name_from_to: GroupGroupTypeNameFromToCompoundUniqueInput
}

input GroupGroupTypeNameFromToCompoundUniqueInput {
  groupType: GroupType!
  name: String!
  from: DateTime!
  to: DateTime!
}

input UserRootsTracingCreateNestedManyWithoutUserInput {
  create: [UserRootsTracingCreateWithoutUserInput!]
  connectOrCreate: [UserRootsTracingCreateOrConnectWithoutUserInput!]
  createMany: UserRootsTracingCreateManyUserInputEnvelope
  connect: [UserRootsTracingWhereUniqueInput!]
}

input UserRootsTracingCreateWithoutUserInput {
  roots: RootsCreateNestedOneWithoutUsersInput!
  from: DateTime
  to: DateTime
  userSkillAcquisitions: UserSkillAcquisitionCreateNestedManyWithoutUserRootsTracingInput
}

input RootsCreateNestedOneWithoutUsersInput {
  create: RootsCreateWithoutUsersInput
  connectOrCreate: RootsCreateOrConnectWithoutUsersInput
  connect: RootsWhereUniqueInput
}

input RootsCreateWithoutUsersInput {
  name: String!
  rootsType: RootsType!
  googleMapUrl: String
  introductionUrl: String
  createdAt: DateTime
  updatedAt: DateTime
}

input RootsCreateOrConnectWithoutUsersInput {
  where: RootsWhereUniqueInput!
  create: RootsCreateWithoutUsersInput!
}

input RootsWhereUniqueInput {
  id: Int
  name_rootsType: RootsNameRootsTypeCompoundUniqueInput
}

input RootsNameRootsTypeCompoundUniqueInput {
  name: String!
  rootsType: RootsType!
}

input UserSkillAcquisitionCreateNestedManyWithoutUserRootsTracingInput {
  create: [UserSkillAcquisitionCreateWithoutUserRootsTracingInput!]
  connectOrCreate: [UserSkillAcquisitionCreateOrConnectWithoutUserRootsTracingInput!]
  createMany: UserSkillAcquisitionCreateManyUserRootsTracingInputEnvelope
  connect: [UserSkillAcquisitionWhereUniqueInput!]
}

input UserSkillAcquisitionCreateWithoutUserRootsTracingInput {
  user: UserCreateNestedOneWithoutSkillsInput!
  skill: SkillCreateNestedOneWithoutUsersInput!
}

input UserCreateNestedOneWithoutSkillsInput {
  create: UserCreateWithoutSkillsInput
  connectOrCreate: UserCreateOrConnectWithoutSkillsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutSkillsInput {
  id: String
  firebaseAuthUid: String!
  email: String!
  disabled: Boolean
  imageUrl: String
  username: String
  firstName: String!
  lastName: String!
  nickName: String
  showOnlyNickname: Boolean
  birthday: DateTime!
  hideAge: Boolean
  position: String!
  socialLinks: SocialLinkCreateNestedManyWithoutUserInput
  isAlumni: Boolean
  roomNumber: Int!
  postNumber: Int!
  groups: GroupCreateNestedManyWithoutUsersInput
  roots: UserRootsTracingCreateNestedManyWithoutUserInput
  bio: String!
  tags: TagCreateNestedManyWithoutUsersInput
  photoUrls: UserCreatephotoUrlsInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TagCreateNestedManyWithoutUsersInput {
  create: [TagCreateWithoutUsersInput!]
  connectOrCreate: [TagCreateOrConnectWithoutUsersInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutUsersInput {
  name: String!
  iconUrl: String
  createdAt: DateTime
  updatedAt: DateTime
}

input TagCreateOrConnectWithoutUsersInput {
  where: TagWhereUniqueInput!
  create: TagCreateWithoutUsersInput!
}

input TagWhereUniqueInput {
  id: Int
}

input UserCreatephotoUrlsInput {
  set: [String!]!
}

input UserCreateOrConnectWithoutSkillsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutSkillsInput!
}

input SkillCreateNestedOneWithoutUsersInput {
  create: SkillCreateWithoutUsersInput
  connectOrCreate: SkillCreateOrConnectWithoutUsersInput
  connect: SkillWhereUniqueInput
}

input SkillCreateWithoutUsersInput {
  name: String!
  parent: SkillCreateNestedOneWithoutChildrenInput
  children: SkillCreateNestedManyWithoutParentInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SkillCreateNestedOneWithoutChildrenInput {
  create: SkillCreateWithoutChildrenInput
  connectOrCreate: SkillCreateOrConnectWithoutChildrenInput
  connect: SkillWhereUniqueInput
}

input SkillCreateWithoutChildrenInput {
  name: String!
  parent: SkillCreateNestedOneWithoutChildrenInput
  users: UserSkillAcquisitionCreateNestedManyWithoutSkillInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserSkillAcquisitionCreateNestedManyWithoutSkillInput {
  create: [UserSkillAcquisitionCreateWithoutSkillInput!]
  connectOrCreate: [UserSkillAcquisitionCreateOrConnectWithoutSkillInput!]
  createMany: UserSkillAcquisitionCreateManySkillInputEnvelope
  connect: [UserSkillAcquisitionWhereUniqueInput!]
}

input UserSkillAcquisitionCreateWithoutSkillInput {
  user: UserCreateNestedOneWithoutSkillsInput!
  userRootsTracing: UserRootsTracingCreateNestedOneWithoutUserSkillAcquisitionsInput
}

input UserRootsTracingCreateNestedOneWithoutUserSkillAcquisitionsInput {
  create: UserRootsTracingCreateWithoutUserSkillAcquisitionsInput
  connectOrCreate: UserRootsTracingCreateOrConnectWithoutUserSkillAcquisitionsInput
  connect: UserRootsTracingWhereUniqueInput
}

input UserRootsTracingCreateWithoutUserSkillAcquisitionsInput {
  user: UserCreateNestedOneWithoutRootsInput!
  roots: RootsCreateNestedOneWithoutUsersInput!
  from: DateTime
  to: DateTime
}

input UserCreateNestedOneWithoutRootsInput {
  create: UserCreateWithoutRootsInput
  connectOrCreate: UserCreateOrConnectWithoutRootsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutRootsInput {
  id: String
  firebaseAuthUid: String!
  email: String!
  disabled: Boolean
  imageUrl: String
  username: String
  firstName: String!
  lastName: String!
  nickName: String
  showOnlyNickname: Boolean
  birthday: DateTime!
  hideAge: Boolean
  position: String!
  socialLinks: SocialLinkCreateNestedManyWithoutUserInput
  isAlumni: Boolean
  roomNumber: Int!
  postNumber: Int!
  groups: GroupCreateNestedManyWithoutUsersInput
  skills: UserSkillAcquisitionCreateNestedManyWithoutUserInput
  bio: String!
  tags: TagCreateNestedManyWithoutUsersInput
  photoUrls: UserCreatephotoUrlsInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserSkillAcquisitionCreateNestedManyWithoutUserInput {
  create: [UserSkillAcquisitionCreateWithoutUserInput!]
  connectOrCreate: [UserSkillAcquisitionCreateOrConnectWithoutUserInput!]
  createMany: UserSkillAcquisitionCreateManyUserInputEnvelope
  connect: [UserSkillAcquisitionWhereUniqueInput!]
}

input UserSkillAcquisitionCreateWithoutUserInput {
  skill: SkillCreateNestedOneWithoutUsersInput!
  userRootsTracing: UserRootsTracingCreateNestedOneWithoutUserSkillAcquisitionsInput
}

input UserSkillAcquisitionCreateOrConnectWithoutUserInput {
  where: UserSkillAcquisitionWhereUniqueInput!
  create: UserSkillAcquisitionCreateWithoutUserInput!
}

input UserSkillAcquisitionWhereUniqueInput {
  userId_skillId: UserSkillAcquisitionUserIdSkillIdCompoundUniqueInput
}

input UserSkillAcquisitionUserIdSkillIdCompoundUniqueInput {
  userId: String!
  skillId: Int!
}

input UserSkillAcquisitionCreateManyUserInputEnvelope {
  data: [UserSkillAcquisitionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserSkillAcquisitionCreateManyUserInput {
  skillId: Int!
  rootsId: Int
}

input UserCreateOrConnectWithoutRootsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutRootsInput!
}

input UserRootsTracingCreateOrConnectWithoutUserSkillAcquisitionsInput {
  where: UserRootsTracingWhereUniqueInput!
  create: UserRootsTracingCreateWithoutUserSkillAcquisitionsInput!
}

input UserRootsTracingWhereUniqueInput {
  userId_rootsId: UserRootsTracingUserIdRootsIdCompoundUniqueInput
}

input UserRootsTracingUserIdRootsIdCompoundUniqueInput {
  userId: String!
  rootsId: Int!
}

input UserSkillAcquisitionCreateOrConnectWithoutSkillInput {
  where: UserSkillAcquisitionWhereUniqueInput!
  create: UserSkillAcquisitionCreateWithoutSkillInput!
}

input UserSkillAcquisitionCreateManySkillInputEnvelope {
  data: [UserSkillAcquisitionCreateManySkillInput!]!
  skipDuplicates: Boolean
}

input UserSkillAcquisitionCreateManySkillInput {
  userId: String!
  rootsId: Int
}

input SkillCreateOrConnectWithoutChildrenInput {
  where: SkillWhereUniqueInput!
  create: SkillCreateWithoutChildrenInput!
}

input SkillWhereUniqueInput {
  id: Int
  name: String
}

input SkillCreateNestedManyWithoutParentInput {
  create: [SkillCreateWithoutParentInput!]
  connectOrCreate: [SkillCreateOrConnectWithoutParentInput!]
  createMany: SkillCreateManyParentInputEnvelope
  connect: [SkillWhereUniqueInput!]
}

input SkillCreateWithoutParentInput {
  name: String!
  children: SkillCreateNestedManyWithoutParentInput
  users: UserSkillAcquisitionCreateNestedManyWithoutSkillInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SkillCreateOrConnectWithoutParentInput {
  where: SkillWhereUniqueInput!
  create: SkillCreateWithoutParentInput!
}

input SkillCreateManyParentInputEnvelope {
  data: [SkillCreateManyParentInput!]!
  skipDuplicates: Boolean
}

input SkillCreateManyParentInput {
  id: Int
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input SkillCreateOrConnectWithoutUsersInput {
  where: SkillWhereUniqueInput!
  create: SkillCreateWithoutUsersInput!
}

input UserSkillAcquisitionCreateOrConnectWithoutUserRootsTracingInput {
  where: UserSkillAcquisitionWhereUniqueInput!
  create: UserSkillAcquisitionCreateWithoutUserRootsTracingInput!
}

input UserSkillAcquisitionCreateManyUserRootsTracingInputEnvelope {
  data: [UserSkillAcquisitionCreateManyUserRootsTracingInput!]!
  skipDuplicates: Boolean
}

input UserSkillAcquisitionCreateManyUserRootsTracingInput {
  skillId: Int!
}

input UserRootsTracingCreateOrConnectWithoutUserInput {
  where: UserRootsTracingWhereUniqueInput!
  create: UserRootsTracingCreateWithoutUserInput!
}

input UserRootsTracingCreateManyUserInputEnvelope {
  data: [UserRootsTracingCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserRootsTracingCreateManyUserInput {
  rootsId: Int!
  from: DateTime
  to: DateTime
}