# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type SocialLink {
  id: ID!
  profile: Profile!
  profileId: Int!
  name: String!
  socialLinkType: SocialLinkType!
  url: String!
}

enum SocialLinkType {
  WEBSITE
  INSTAGRAM
  TWITTER
  FACEBOOK
  LINE
  SNAPCHAT
  TIKTOK
  YOUTUBE
  GITHUB
  BEREAL
  LINKTREE
  OTHER
}

type ProgramCount {
  shimokitaCollegeProfiles: Int!
}

type Program {
  id: ID!
  name: String!
  from: DateTime
  to: DateTime
  shimokitaCollegeProfiles: [ShimokitaCollegeProfile!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: ProgramCount!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type HomeCount {
  photos: Int!
  shimokitaCollegeProfiles: Int!
}

type Home {
  id: ID!
  name: String!
  from: DateTime
  to: DateTime
  photos: [Photo!]
  shimokitaCollegeProfiles: [ShimokitaCollegeProfile!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: HomeCount!
}

type CommitteeCount {
  photos: Int!
  shimokitaCollegeProfiles: Int!
}

type Committee {
  id: ID!
  name: String!
  imageUrl: String
  slackChannel: String
  description: String
  photos: [Photo!]
  shimokitaCollegeProfiles: [ShimokitaCollegeProfile!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: CommitteeCount!
}

type ClubCount {
  photos: Int!
  shimokitaCollegeProfiles: Int!
}

type Club {
  id: ID!
  name: String!
  imageUrl: String
  slackChannel: String
  description: String
  photos: [Photo!]
  shimokitaCollegeProfiles: [ShimokitaCollegeProfile!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: ClubCount!
}

type PhotoCount {
  profiles: Int!
  houses: Int!
  homes: Int!
  committee: Int!
  clubs: Int!
}

type Photo {
  id: ID!
  imageUrl: String!
  alt: String!
  profiles: [Profile!]
  houses: [House!]
  homes: [Home!]
  committee: [Committee!]
  clubs: [Club!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: PhotoCount!
}

type HouseCount {
  photos: Int!
  shimokitaCollegeProfiles: Int!
}

type House {
  id: ID!
  name: String!
  from: DateTime
  to: DateTime
  photos: [Photo!]
  shimokitaCollegeProfiles: [ShimokitaCollegeProfile!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: HouseCount!
}

type ShimokitaCollegeProfileCount {
  programs: Int!
  houses: Int!
  homes: Int!
  committee: Int!
  clubs: Int!
}

type ShimokitaCollegeProfile {
  id: ID!
  profile: Profile!
  profileId: Int!
  isAlumni: Boolean!
  slackEmail: String!
  roomNumber: Int!
  postNumber: Int!
  programs: [Program!]
  houses: [House!]
  homes: [Home!]
  committee: [Committee!]
  clubs: [Club!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: ShimokitaCollegeProfileCount!
}

type RootsCount {
  myRoots: Int!
}

type Roots {
  id: ID!
  name: String!
  rootsType: RootsType!
  googleMapUrl: String
  introductionUrl: String
  myRoots: [MyRoots!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: RootsCount!
}

enum RootsType {
  COUNTRY
  HOMETOWN
  EDUCATION
  WORK
  GROUP
}

type SkillCount {
  children: Int!
  profiles: Int!
}

type Skill {
  id: ID!
  name: String!
  parentId: Int
  parent: Skill
  children: [Skill!]
  profiles: [MySkills!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: SkillCount!
}

type MySkills {
  profile: Profile!
  profileId: Int!
  skill: Skill!
  skillId: Int!
  myRoots: MyRoots
  myRootsId: Int
}

type MyRootsCount {
  profilesOnSkills: Int!
}

type MyRoots {
  id: ID!
  profile: Profile!
  profileId: Int!
  roots: Roots!
  rootsId: Int!
  from: DateTime
  to: DateTime
  profilesOnSkills: [MySkills!]
  _count: MyRootsCount!
}

type TagCount {
  profiles: Int!
}

type Tag {
  id: ID!
  name: String!
  iconUrl: String
  profiles: [Profile!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: TagCount!
}

type ProfileCount {
  socialLinks: Int!
  myRoots: Int!
  mySkills: Int!
  tags: Int!
  photos: Int!
}

type Profile {
  id: ID!
  user: User!
  userId: String!
  username: String!
  firstName: String!
  lastName: String!
  nickName: String
  showOnlyNickname: Boolean!
  birthday: DateTime!
  hideAge: Boolean!
  position: String!
  socialLinks: [SocialLink!]
  shimokitaCollegeProfile: ShimokitaCollegeProfile
  myRoots: [MyRoots!]
  mySkills: [MySkills!]
  bio: String!
  tags: [Tag!]
  photos: [Photo!]
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: ProfileCount!
}

type User {
  id: ID!
  firebaseAuthUid: String!
  email: String
  imageUrl: String
  disabled: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  profile: Profile
}

type UserCountAggregate {
  id: Int!
  firebaseAuthUid: Int!
  email: Int!
  imageUrl: Int!
  disabled: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type UserMinAggregate {
  id: String
  firebaseAuthUid: String
  email: String
  imageUrl: String
  disabled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type UserMaxAggregate {
  id: String
  firebaseAuthUid: String
  email: String
  imageUrl: String
  disabled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type IsValid {
  isValid: Boolean!
}

type Auth {
  accessToken: String!
}

type Query {
  whoAmI: User!
  validateUsername(username: String!): IsValid!
  users(where: UserWhereInput!): [User!]!
  user(where: UserWhereUniqueInput!): User!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  firebaseAuthUid: StringFilter
  email: StringNullableFilter
  imageUrl: StringNullableFilter
  disabled: BoolFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  profile: ProfileRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input ProfileRelationFilter {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  id: IntFilter
  user: UserRelationFilter
  userId: StringFilter
  username: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  nickName: StringNullableFilter
  showOnlyNickname: BoolFilter
  birthday: DateTimeFilter
  hideAge: BoolFilter
  position: StringFilter
  socialLinks: SocialLinkListRelationFilter
  shimokitaCollegeProfile: ShimokitaCollegeProfileRelationFilter
  myRoots: MyRootsListRelationFilter
  mySkills: MySkillsListRelationFilter
  bio: StringFilter
  tags: TagListRelationFilter
  photos: PhotoListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input SocialLinkListRelationFilter {
  every: SocialLinkWhereInput
  some: SocialLinkWhereInput
  none: SocialLinkWhereInput
}

input SocialLinkWhereInput {
  AND: [SocialLinkWhereInput!]
  OR: [SocialLinkWhereInput!]
  NOT: [SocialLinkWhereInput!]
  id: IntFilter
  profile: ProfileRelationFilter
  profileId: IntFilter
  name: StringFilter
  socialLinkType: EnumSocialLinkTypeFilter
  url: StringFilter
}

input EnumSocialLinkTypeFilter {
  equals: SocialLinkType
  in: [SocialLinkType!]
  notIn: [SocialLinkType!]
  not: NestedEnumSocialLinkTypeFilter
}

input NestedEnumSocialLinkTypeFilter {
  equals: SocialLinkType
  in: [SocialLinkType!]
  notIn: [SocialLinkType!]
  not: NestedEnumSocialLinkTypeFilter
}

input ShimokitaCollegeProfileRelationFilter {
  is: ShimokitaCollegeProfileWhereInput
  isNot: ShimokitaCollegeProfileWhereInput
}

input ShimokitaCollegeProfileWhereInput {
  AND: [ShimokitaCollegeProfileWhereInput!]
  OR: [ShimokitaCollegeProfileWhereInput!]
  NOT: [ShimokitaCollegeProfileWhereInput!]
  id: IntFilter
  profile: ProfileRelationFilter
  profileId: IntFilter
  isAlumni: BoolFilter
  slackEmail: StringFilter
  roomNumber: IntFilter
  postNumber: IntFilter
  programs: ProgramListRelationFilter
  houses: HouseListRelationFilter
  homes: HomeListRelationFilter
  committee: CommitteeListRelationFilter
  clubs: ClubListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ProgramListRelationFilter {
  every: ProgramWhereInput
  some: ProgramWhereInput
  none: ProgramWhereInput
}

input ProgramWhereInput {
  AND: [ProgramWhereInput!]
  OR: [ProgramWhereInput!]
  NOT: [ProgramWhereInput!]
  id: IntFilter
  name: StringFilter
  from: DateTimeNullableFilter
  to: DateTimeNullableFilter
  shimokitaCollegeProfiles: ShimokitaCollegeProfileListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input ShimokitaCollegeProfileListRelationFilter {
  every: ShimokitaCollegeProfileWhereInput
  some: ShimokitaCollegeProfileWhereInput
  none: ShimokitaCollegeProfileWhereInput
}

input HouseListRelationFilter {
  every: HouseWhereInput
  some: HouseWhereInput
  none: HouseWhereInput
}

input HouseWhereInput {
  AND: [HouseWhereInput!]
  OR: [HouseWhereInput!]
  NOT: [HouseWhereInput!]
  id: IntFilter
  name: StringFilter
  from: DateTimeNullableFilter
  to: DateTimeNullableFilter
  photos: PhotoListRelationFilter
  shimokitaCollegeProfiles: ShimokitaCollegeProfileListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PhotoListRelationFilter {
  every: PhotoWhereInput
  some: PhotoWhereInput
  none: PhotoWhereInput
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IntFilter
  imageUrl: StringFilter
  alt: StringFilter
  profiles: ProfileListRelationFilter
  houses: HouseListRelationFilter
  homes: HomeListRelationFilter
  committee: CommitteeListRelationFilter
  clubs: ClubListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ProfileListRelationFilter {
  every: ProfileWhereInput
  some: ProfileWhereInput
  none: ProfileWhereInput
}

input HomeListRelationFilter {
  every: HomeWhereInput
  some: HomeWhereInput
  none: HomeWhereInput
}

input HomeWhereInput {
  AND: [HomeWhereInput!]
  OR: [HomeWhereInput!]
  NOT: [HomeWhereInput!]
  id: IntFilter
  name: StringFilter
  from: DateTimeNullableFilter
  to: DateTimeNullableFilter
  photos: PhotoListRelationFilter
  shimokitaCollegeProfiles: ShimokitaCollegeProfileListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CommitteeListRelationFilter {
  every: CommitteeWhereInput
  some: CommitteeWhereInput
  none: CommitteeWhereInput
}

input CommitteeWhereInput {
  AND: [CommitteeWhereInput!]
  OR: [CommitteeWhereInput!]
  NOT: [CommitteeWhereInput!]
  id: IntFilter
  name: StringFilter
  imageUrl: StringNullableFilter
  slackChannel: StringNullableFilter
  description: StringNullableFilter
  photos: PhotoListRelationFilter
  shimokitaCollegeProfiles: ShimokitaCollegeProfileListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ClubListRelationFilter {
  every: ClubWhereInput
  some: ClubWhereInput
  none: ClubWhereInput
}

input ClubWhereInput {
  AND: [ClubWhereInput!]
  OR: [ClubWhereInput!]
  NOT: [ClubWhereInput!]
  id: IntFilter
  name: StringFilter
  imageUrl: StringNullableFilter
  slackChannel: StringNullableFilter
  description: StringNullableFilter
  photos: PhotoListRelationFilter
  shimokitaCollegeProfiles: ShimokitaCollegeProfileListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input MyRootsListRelationFilter {
  every: MyRootsWhereInput
  some: MyRootsWhereInput
  none: MyRootsWhereInput
}

input MyRootsWhereInput {
  AND: [MyRootsWhereInput!]
  OR: [MyRootsWhereInput!]
  NOT: [MyRootsWhereInput!]
  id: IntFilter
  profile: ProfileRelationFilter
  profileId: IntFilter
  roots: RootsRelationFilter
  rootsId: IntFilter
  from: DateTimeNullableFilter
  to: DateTimeNullableFilter
  profilesOnSkills: MySkillsListRelationFilter
}

input RootsRelationFilter {
  is: RootsWhereInput
  isNot: RootsWhereInput
}

input RootsWhereInput {
  AND: [RootsWhereInput!]
  OR: [RootsWhereInput!]
  NOT: [RootsWhereInput!]
  id: IntFilter
  name: StringFilter
  rootsType: EnumRootsTypeFilter
  googleMapUrl: StringNullableFilter
  introductionUrl: StringNullableFilter
  myRoots: MyRootsListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input EnumRootsTypeFilter {
  equals: RootsType
  in: [RootsType!]
  notIn: [RootsType!]
  not: NestedEnumRootsTypeFilter
}

input NestedEnumRootsTypeFilter {
  equals: RootsType
  in: [RootsType!]
  notIn: [RootsType!]
  not: NestedEnumRootsTypeFilter
}

input MySkillsListRelationFilter {
  every: MySkillsWhereInput
  some: MySkillsWhereInput
  none: MySkillsWhereInput
}

input MySkillsWhereInput {
  AND: [MySkillsWhereInput!]
  OR: [MySkillsWhereInput!]
  NOT: [MySkillsWhereInput!]
  profile: ProfileRelationFilter
  profileId: IntFilter
  skill: SkillRelationFilter
  skillId: IntFilter
  myRoots: MyRootsRelationFilter
  myRootsId: IntNullableFilter
}

input SkillRelationFilter {
  is: SkillWhereInput
  isNot: SkillWhereInput
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
  id: IntFilter
  name: StringFilter
  parentId: IntNullableFilter
  parent: SkillRelationFilter
  children: SkillListRelationFilter
  profiles: MySkillsListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input SkillListRelationFilter {
  every: SkillWhereInput
  some: SkillWhereInput
  none: SkillWhereInput
}

input MyRootsRelationFilter {
  is: MyRootsWhereInput
  isNot: MyRootsWhereInput
}

input TagListRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IntFilter
  name: StringFilter
  iconUrl: StringNullableFilter
  profiles: ProfileListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  id: String
  firebaseAuthUid: String
  email: String
}

type Mutation {
  login(firebaseIdToken: String!): Auth!
}