// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider               = "prisma-nestjs-graphql"
  output                 = "./graphql"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
  purgeOutput            = true
  reExport               = Directories
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(uuid())
  firebaseAuthUid String  @unique
  /// @Validator.IsEmail()
  email           String  @unique
  disabled        Boolean @default(false)

  // Step 1
  /// @Validator.IsUrl()
  imageUrl String?
  /// @Validator.IsAlphanumeric()
  /// @Validator.Length(4, 12)
  username String? @unique

  // Step 2
  /// @Validator.IsNotEmpty()
  firstName        String
  /// @Validator.IsNotEmpty()
  lastName         String
  nickName         String?
  showOnlyNickname Boolean      @default(false)
  birthday         DateTime
  hideAge          Boolean      @default(false)
  /// @Validator.IsNotEmpty()
  position         String
  socialLinks      SocialLink[]

  // Step 3
  isAlumni   Boolean @default(false)
  /// @Validator.@Min(100)
  /// @Validator.@Max(599)
  roomNumber Int?
  /// @Validator.@Min(100)
  /// @Validator.@Max(599)
  postNumber Int?
  groups     Group[]

  // Step 4
  roots  UserRootsTracing[]
  skills UserSkillAcquisition[]

  // Step 5
  /// @Validator.IsNotEmpty()
  bio       String
  tags      Tag[]
  /// @Validator.IsUrl(undefined, { each: true })
  photoUrls String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id        Int       @id @default(autoincrement())
  groupType GroupType
  name      String
  from      DateTime?
  to        DateTime?

  emoji        String?
  imageUrl     String?
  slackChannel String?
  description  String?
  /// @Validator.IsUrl(undefined, { each: true })
  photoUrls    String[]

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([groupType, name, from, to])
}

enum GroupType {
  PROGRAM
  HOUSE
  HOME
  COMMITTEE
  CLUB
}

model SocialLink {
  id             Int             @id @default(autoincrement())
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  name           String
  // For Icon
  socialLinkType SocialLinkType?
  /// @Validator.IsUrl()
  url            String
}

enum SocialLinkType {
  WEBSITE
  INSTAGRAM
  TWITTER
  FACEBOOK
  LINE
  SNAPCHAT
  TIKTOK
  YOUTUBE
  GITHUB
  LINKTREE
}

// seed ShimokitaCollege

model Roots {
  id              Int       @id @default(autoincrement())
  name            String
  rootsType       RootsType
  googleMapUrl    String?
  introductionUrl String?

  users UserRootsTracing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, rootsType])
}

enum RootsType {
  COUNTRY
  HOMETOWN
  EDUCATION
  WORK
  GROUP
}

model UserRootsTracing {
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  roots   Roots     @relation(fields: [rootsId], references: [id])
  rootsId Int
  from    DateTime?
  to      DateTime?

  userSkillAcquisitions UserSkillAcquisition[]

  @@id([userId, rootsId])
}

model Skill {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  parentId Int?
  parent   Skill?  @relation("SkillTree", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  children Skill[] @relation("SkillTree")

  users UserSkillAcquisition[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSkillAcquisition {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  skill   Skill  @relation(fields: [skillId], references: [id])
  skillId Int

  userRootsTracing UserRootsTracing? @relation(fields: [userId, rootsId], references: [userId, rootsId])
  rootsId          Int?

  @@id([userId, skillId])
}

model Tag {
  id      Int     @id @default(autoincrement())
  /// @Validator.IsNotEmpty()
  name    String
  /// @Validator.IsUrl()
  iconUrl String?

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
