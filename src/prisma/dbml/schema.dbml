//// ------------------------------------------------------
//// THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
//// ------------------------------------------------------

Table User {
  id String [pk]
  firebaseAuthUid String [unique, not null]
  email String [unique, not null, note: '@Validator.IsEmail()']
  disabled Boolean [not null, default: false]
  imageUrl String [note: '@Validator.IsUrl()']
  username String [unique, not null, note: '@Validator.IsAlphanumeric()
@Validator.Length(3, 12)']
  firstName String [not null, note: '@Validator.IsNotEmpty()']
  lastName String [not null, note: '@Validator.IsNotEmpty()']
  nickName String
  showOnlyNickname Boolean [not null, default: false]
  birthday DateTime [not null]
  hideAge Boolean [not null, default: false]
  position String [not null, note: '@Validator.IsNotEmpty()']
  socialLinks SocialLink [not null]
  isAlumni Boolean [not null, default: false]
  roomNumber Int [note: '@Validator.@Min(100)
@Validator.@Max(599)']
  postNumber Int [note: '@Validator.@Min(100)
@Validator.@Max(599)']
  generations Generation [not null]
  groups Group [not null]
  roots UserRootsTracing [not null]
  skills UserSkillAcquisition [not null]
  bio String [not null, note: '@Validator.IsNotEmpty()']
  tags Tag [not null]
  photoUrls String[] [not null, note: '@Validator.IsUrl(undefined, { each: true })']
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]
}

Table Generation {
  id Int [pk, increment]
  generationType GenerationType [not null]
  name String [not null]
  from DateTime [not null]
  to DateTime [not null]
  emoji String
  imageUrl String [note: '@Validator.IsUrl()']
  hexColor String [note: '@Validator.IsHexColor()']
  slackChannel String
  description String
  photoUrls String[] [not null, note: '@Validator.IsUrl(undefined, { each: true })']
  users User [not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]

  indexes {
    (generationType, name, from, to) [unique]
  }
}

Table Group {
  id Int [pk, increment]
  groupType GroupType [not null]
  name String [not null]
  emoji String
  imageUrl String [note: '@Validator.IsUrl()']
  slackChannel String
  description String
  photoUrls String[] [not null, note: '@Validator.IsUrl(undefined, { each: true })']
  users User [not null]
  createdAt DateTime [default: `now()`, not null]
  updatedAt DateTime [not null]

  indexes {
    (groupType, name) [unique]
  }
}

Table SocialLink {
  id Int [pk, increment]
  user User [not null]
  userId String [not null]
  name String [not null]
  socialLinkType SocialLinkType
  url String [not null, note: '@Validator.IsUrl()']
}

Table Roots {
  id Int [pk, increment]
  name String [not null]
  rootsType RootsType [not null]
  googleMapUrl String
  introductionUrl String
  users UserRootsTracing [not null]

  indexes {
    (name, rootsType) [unique]
  }
}

Table UserRootsTracing {
  user User [not null]
  userId String [not null]
  roots Roots [not null]
  rootsId Int [not null]
  from DateTime
  to DateTime
  userSkillAcquisitions UserSkillAcquisition [not null]

  indexes {
    (userId, rootsId) [pk]
  }
}

Table Skill {
  id Int [pk, increment]
  name String [unique, not null]
  parentId Int
  parent Skill
  children Skill [not null]
  users UserSkillAcquisition [not null]
}

Table UserSkillAcquisition {
  user User [not null]
  userId String [not null]
  skill Skill [not null]
  skillId Int [not null]
  userRootsTracing UserRootsTracing
  rootsId Int

  indexes {
    (userId, skillId) [pk]
  }
}

Table Tag {
  id Int [pk, increment]
  name String [not null, note: '@Validator.IsNotEmpty()']
  iconUrl String [note: '@Validator.IsUrl()']
  users User [not null]
}

Table GenerationToUser {
  generationsId Int [ref: > Generation.id]
  usersId String [ref: > User.id]
}

Table GroupToUser {
  groupsId Int [ref: > Group.id]
  usersId String [ref: > User.id]
}

Table TagToUser {
  tagsId Int [ref: > Tag.id]
  usersId String [ref: > User.id]
}

Enum GenerationType {
  PROGRAM
  HOUSE
  HOME
}

Enum GroupType {
  COMMITTEE
  CLUB
}

Enum SocialLinkType {
  WEBSITE
  INSTAGRAM
  TWITTER
  FACEBOOK
  LINE
  SNAPCHAT
  TIKTOK
  YOUTUBE
  GITHUB
  LINKTREE
}

Enum RootsType {
  COUNTRY
  HOMETOWN
  EDUCATION
  WORK
  GROUP
}

Ref: SocialLink.userId > User.id [delete: Cascade]

Ref: UserRootsTracing.userId > User.id [delete: Cascade]

Ref: UserRootsTracing.rootsId > Roots.id [delete: Cascade]

Ref: Skill.parentId - Skill.id [delete: Restrict]

Ref: UserSkillAcquisition.userId > User.id [delete: Cascade]

Ref: UserSkillAcquisition.skillId > Skill.id [delete: Cascade]

Ref: UserSkillAcquisition.(userId, rootsId) > UserRootsTracing.(userId, rootsId)